/*
 * Copyright (c) 2018 Analog Devices, Inc.  All rights reserved.
 *
 * Bare-Metal ("BM") device driver header for ADAUxxxx devices.
 */

#ifndef _BM_ADAU_DEVICE_H
#define _BM_ADAU_DEVICE_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

#include "drivers/bm_gpio_driver/bm_gpio.h"
#include "drivers/bm_spi_driver/bm_spi.h"
#include "drivers/bm_twi_driver/bm_twi.h"

#include "register_maps/registers_adau1452.h"
#include "register_maps/registers_adau1761.h"
#include "register_maps/registers_adau1966.h"
#include "register_maps/registers_adau1977.h"
#include "register_maps/registers_adau1979.h"

// ADAU driver return values
typedef enum
{
    ADAU_SUCCESS,                 // The API call is success
    ADAU_CORRUPT_INIT_FILE,       // SS-generated initialization file is corrupt
    ADAU_TWI_TIMEOUT_ERROR,       // A TWI timeout error occurred while trying to communicate with device
    ADAU_PLL_LOCK_TIMEOUT_ERROR,      // The PLL of the device we're driving failed to lock
    ADAU_SIMPLE_ERROR               // General failure
} BM_ADAU_RESULT;

// Base address for AD2425W (A2B controller)
#define     AD2425_SAM_I2C_ADDR

// Various known I2C addresses
#define     SAM_ADAU1761_I2C_ADDR         (0x38)
#define     AD2410_EVAL_ADAU1761_I2C_ADDR       (0x39)
#define     AUTO_ADAU1966_I2C_ADDR              (0x04)
#define     AUTO_ADAU1977_I2C_ADDR              (0x11)
#define     AUTO_ADAU1979_I2C_ADDR              (0x11)
// On the original automotive boards, the ADAU1979 and the ADAU1977 are at the same I2C
// address of 0x11.  Use this modified address if you have hand-modified one of these
// early automotive boards such that its I2C address is shifted to 0x51.
#define     AUTO_ADAU1979_I2C_ADDR_MODIFIED     (0x51)

// The number of bytes these devices use for the control register addresses over I2C/TWI
#define     ADAU1977_ADDR_BYTES                 (1)
#define     ADAU1979_ADDR_BYTES                 (1)
#define     ADAU1966_ADDR_BYTES                 (1)
#define     ADAU1761_ADDR_BYTES                 (2)
#define     SSM3582_ADDR_BYTES                  (2)

// Various know MCLK values
#define     SHARC_SAM_MCLK                      (12288000)
#define     SHARC_SAM_AUTOMOTIVE_MCLK           (12288000)

#ifdef __cplusplus
extern "C" {
#endif

// A simple structure that contains information for a single instance of this driver
typedef struct
{
    BM_TWI twi;         // Simple TWI driver
    uint8_t address_bytes;  // Number of bytes used for control register address
} BM_ADAU_DEVICE;

typedef struct
{
    uint8_t     *data_tx_buffer;
    uint16_t    *data_num_bytes;
    uint16_t total_lines;
    bool ignore_first_byte_of_init_file;
} BM_ADAU_DEVICE_INIT_DATA;

/*==============  CONVERTER INITIALIZATION FILES  ===============*/

/*
 * These structures contain the initialization data generated by SigmaStudio.  The schematics that were
 * used to generate the initialization code can be found in the ss_schematics directory.
 */

// ADAU1761 (CODEC on SHARC board and certain A2B boards)
extern BM_ADAU_DEVICE_INIT_DATA adau1761_2ch_i2s_master;
extern BM_ADAU_DEVICE_INIT_DATA adau1761_8ch_i2s_enhanced_master;
extern BM_ADAU_DEVICE_INIT_DATA adau1761_2ch_i2s_slave;
extern BM_ADAU_DEVICE_INIT_DATA adau1761_8ch_i2s_master;
extern BM_ADAU_DEVICE_INIT_DATA adau1761_8ch_i2s_slave;

// ADAU1452 (SigmaDSP on automotive board)
extern BM_ADAU_DEVICE_INIT_DATA adau1452_16ch_master;          // Default configuration for ADAU1452

// ADAU1966 (16 channel DAC on automotive board)
extern BM_ADAU_DEVICE_INIT_DATA adau1966_8ch_dual_i2s_slave;   // Default configuration to work with ADAU1452

// ADAU1977 (4 channel ADC on automotive board)
extern BM_ADAU_DEVICE_INIT_DATA adau1977_4ch_i2s_slave;       // Default configuration to work with ADAU1452

// ADAU1979 (4 channel ADC on automotive board)
extern BM_ADAU_DEVICE_INIT_DATA adau1979_4ch_i2s_slave;       // Default configuration to work with ADAU1452

// SSM3582 (2 channel class D chip)
extern BM_ADAU_DEVICE_INIT_DATA ssm3582_2ch_i2s_slave;

// Initializes an ADAU device
BM_ADAU_RESULT adau_initialize(BM_ADAU_DEVICE *adau_device,
                               BM_TWI_PERIPHERAL_NUMBER device_num,
                               uint8_t i2c_address,
                               BM_ADAU_DEVICE_INIT_DATA *adau_init_data,
                               uint8_t address_bytes);

// Loads a bulk initialization file exported from SigmaStudio into an ADAU device
BM_ADAU_RESULT adau_load_bulk_reg_file(BM_ADAU_DEVICE *adau_device,
                                       uint8_t *values,
                                       uint16_t *lengths,
                                       uint16_t total_lines,
                                       bool ignore_first_byte_of_init_file);

// Reads a control register value from an ADAU device
BM_ADAU_RESULT adau_read_ctrl_reg(BM_ADAU_DEVICE *adau_device,
                                  uint16_t address,
                                  uint8_t *value);

// Writes a control register value from an ADAU device
BM_ADAU_RESULT adau_write_ctrl_reg(BM_ADAU_DEVICE *adau_device,
                                   uint16_t address,
                                   uint8_t value);

// Reads a parameter RAM location in a SigmaDSP ADAU device
BM_ADAU_RESULT adau_read_parameter_ram(BM_ADAU_DEVICE *adau_device,
                                       uint16_t address,
                                       uint32_t *value);

// Writes a parameter RAM location in a SigmaDSP ADAU device
BM_ADAU_RESULT adau_write_parameter_ram(BM_ADAU_DEVICE *adau_device,
                                        uint16_t address,
                                        uint32_t value);

/*
 * Some devices require specific operations that go beyond the basic functions
 * defined above.
 */

/******************************************************************************
 *                                   ADAU1761                                 *
 *****************************************************************************/
bool adau1761_set_samplerate(BM_ADAU_DEVICE *adau1761,
                             uint32_t sample_rate);

/******************************************************************************
 *                                   ADAU1452                                 *
 *****************************************************************************/
typedef struct
{

    BM_SPI spi;                   // Simple SPI driver
    BM_GPIO_PORTPIN spi_select_pin;     // Pin used for SPI select
} BM_ADAU1452_DEVICE;

BM_ADAU_RESULT adau1452_initialize(BM_ADAU1452_DEVICE *adau1452,
                                   BM_GPIO_PORTPIN spi_select_pin,
                                   BM_SPI_PERIPHERAL_NUMBER device_num,
                                   BM_ADAU_DEVICE_INIT_DATA *adau_init_data);

uint16_t adau1452_read_word(BM_ADAU1452_DEVICE *adau1452,
                            uint16_t address);

BM_ADAU_RESULT adau1452_load_bulk_reg_file(BM_ADAU1452_DEVICE *adau1452,
                                           uint8_t *values,
                                           uint16_t *lengths,
                                           uint16_t total_lines);

#ifdef __cplusplus
} // extern "C"
#endif

#endif  //_BM_ADAU_DEVICE_H
